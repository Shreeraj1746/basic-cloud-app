AWSTemplateFormatVersion: '2010-09-09'
Description: 'Compute resources for Basic Cloud App'

Parameters:
  Environment:
    Description: Environment name
    Type: String
    Default: dev

  ProjectName:
    Description: Name of the project
    Type: String
    Default: BasicCloudApp

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro

  KeyPairName:
    Description: Name of an existing EC2 KeyPair
    Type: String

  PublicSubnet1:
    Description: ID of public subnet 1
    Type: String

  PublicSubnet2:
    Description: ID of public subnet 2
    Type: String

  VpcId:
    Description: ID of the VPC
    Type: String

  WebServerSecurityGroupId:
    Description: ID of the web server security group
    Type: String

  ALBSecurityGroupId:
    Description: ID of the ALB security group
    Type: String

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0b5eea76982371e91 # Amazon Linux 2 AMI
    us-east-2:
      AMI: ami-0233c2d874b811deb
    us-west-1:
      AMI: ami-0ed05376b59b90e46
    us-west-2:
      AMI: ami-0dc8f589abe99f538
    eu-west-1:
      AMI: ami-058b1b7fe545997ae
    eu-central-1:
      AMI: ami-00f22f6155d6d92c5
    ap-southeast-1:
      AMI: ami-0b89f7b3f054b957e
    ap-southeast-2:
      AMI: ami-075a72b1992cb0687
    ap-northeast-1:
      AMI: ami-0ab0bbbd329f565e6
    sa-east-1:
      AMI: ami-0b7af114fb404f2e5

Resources:
  # EC2 Instance Profile
  WebAppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref WebAppRole

  # IAM Role for EC2
  WebAppRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: /

  # Launch Template
  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${ProjectName}-${Environment}-launch-template
      VersionDescription: Initial Version
      LaunchTemplateData:
        ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !Ref WebServerSecurityGroupId
        IamInstanceProfile:
          Name: !Ref WebAppInstanceProfile
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # Install dependencies
            yum update -y
            yum install -y python3 pip git

            # Create app directory
            mkdir -p /opt/app

            # Copy application code
            cat > /opt/app/app.py << 'EOL'
            #!/usr/bin/env python3
            import http.server
            import socketserver
            import os
            import logging

            # Configure logging
            logging.basicConfig(
                level=logging.INFO,
                format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
            logger = logging.getLogger('simple-app')

            # Get port from environment variable or use default
            PORT = int(os.environ.get('PORT', 80))

            class SimpleHandler(http.server.SimpleHTTPRequestHandler):
                def do_GET(self):
                    """Serve a simple text response to any GET request"""
                    self.send_response(200)
                    self.send_header('Content-type', 'text/html')
                    self.end_headers()

                    # Simple HTML response
                    html = """
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <title>AWS CloudFormation Demo App</title>
                        <style>
                            body {
                                font-family: Arial, sans-serif;
                                margin: 40px;
                                text-align: center;
                            }
                            .container {
                                max-width: 800px;
                                margin: 0 auto;
                                border: 1px solid #ddd;
                                padding: 20px;
                                border-radius: 5px;
                                background-color: #f9f9f9;
                            }
                            h1 {
                                color: #2573a7;
                            }
                        </style>
                    </head>
                    <body>
                        <div class="container">
                            <h1>AWS CloudFormation Demo</h1>
                            <p>This simple Python application is deployed using AWS CloudFormation.</p>
                            <p>The infrastructure includes EC2, ALB, RDS, ElastiCache, and S3 components.</p>
                            <p>Instance ID: $(curl -s http://169.254.169.254/latest/meta-data/instance-id)</p>
                            <p>Availability Zone: $(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)</p>
                        </div>
                    </body>
                    </html>
                    """

                    self.wfile.write(html.encode('utf-8'))
                    logger.info(f"Served request from {self.client_address[0]}")

                def log_message(self, format, *args):
                    """Override to use our custom logger"""
                    logger.info(f"{self.client_address[0]} - {format%args}")

            def run_server():
                """Run the HTTP server"""
                logger.info(f"Starting server on port {PORT}")
                with socketserver.TCPServer(("", PORT), SimpleHandler) as httpd:
                    logger.info(f"Server running at http://localhost:{PORT}")
                    try:
                        httpd.serve_forever()
                    except KeyboardInterrupt:
                        logger.info("Server stopped by user")
                    finally:
                        httpd.server_close()
                        logger.info("Server closed")

            if __name__ == "__main__":
                run_server()
            EOL

            # Make app executable
            chmod +x /opt/app/app.py

            # Create systemd service file
            cat > /etc/systemd/system/webapp.service << 'EOL'
            [Unit]
            Description=Simple Python Web Application
            After=network.target

            [Service]
            Type=simple
            User=root
            WorkingDirectory=/opt/app
            ExecStart=/usr/bin/python3 /opt/app/app.py
            Restart=always
            Environment=PORT=80

            [Install]
            WantedBy=multi-user.target
            EOL

            # Enable and start service
            systemctl daemon-reload
            systemctl enable webapp
            systemctl start webapp

  # Auto Scaling Group
  WebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${ProjectName}-${Environment}-asg
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      LaunchTemplate:
        LaunchTemplateId: !Ref WebAppLaunchTemplate
        Version: !GetAtt WebAppLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-web-instance
          PropagateAtLaunch: true

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ProjectName}-${Environment}-alb
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroupId
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-alb

  # ALB Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # ALB Target Group
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ProjectName}-${Environment}-tg
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      TargetType: instance
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-tg

  # Auto Scaling Policies
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebAppAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 70.0

Outputs:
  ALBDNSName:
    Description: DNS Name of the Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-ALBDNSName

  AutoScalingGroupName:
    Description: Name of the Auto Scaling Group
    Value: !Ref WebAppAutoScalingGroup
    Export:
      Name: !Sub ${AWS::StackName}-ASGName
